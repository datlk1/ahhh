local player = game.Players.LocalPlayer
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local TweenService = game:GetService("TweenService")

-- Trạng thái
local flying = false
local invisible = false
local noClip = false
local teleporting = false
local targetPlayer = nil
local bodyVelocity = nil

-- Cài đặt
local flySpeed = 200
local searchRange = 40
local minRange = 20
local teleportDistance = 2
local tweenTime = 0.1

local originalTransparency = {}
local originalNameDisplay = {}

-- Gửi thông báo
local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", { Title = title, Text = text })
end

-- Thông báo khi script bắt đầu
sendNotification("Thông Báo", "Script này được tạo bởi Hamster!")

-- Bay
local function toggleFly()
    flying = not flying
    local character = player.Character
    local hrp = character and character:FindFirstChild("HumanoidRootPart")
    if flying then
        bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(1e6, 1e6, 1e6)
        bodyVelocity.Velocity = Vector3.zero
        bodyVelocity.Parent = hrp
        sendNotification("Bay", "Đã bật chế độ bay.")
    else
        if bodyVelocity then
            bodyVelocity:Destroy()
            bodyVelocity = nil
        end
        sendNotification("Bay", "Đã tắt chế độ bay.")
    end
end

RunService.Heartbeat:Connect(function()
    if flying and bodyVelocity then
        local character = player.Character
        local hrp = character and character:FindFirstChild("HumanoidRootPart")
        local camera = workspace.CurrentCamera
        local moveDirection = Vector3.zero

        if UIS:IsKeyDown(Enum.KeyCode.W) then
            moveDirection += camera.CFrame.LookVector
        end
        if UIS:IsKeyDown(Enum.KeyCode.S) then
            moveDirection -= camera.CFrame.LookVector
        end
        if UIS:IsKeyDown(Enum.KeyCode.A) then
            moveDirection -= camera.CFrame.RightVector
        end
        if UIS:IsKeyDown(Enum.KeyCode.D) then
            moveDirection += camera.CFrame.RightVector
        end
        if UIS:IsKeyDown(Enum.KeyCode.Space) then
            moveDirection += Vector3.new(0, 1, 0)
        end
        if UIS:IsKeyDown(Enum.KeyCode.LeftShift) then
            moveDirection -= Vector3.new(0, 1, 0)
        end

        if moveDirection.Magnitude > 0 then
            bodyVelocity.Velocity = moveDirection.Unit * flySpeed
        else
            bodyVelocity.Velocity = Vector3.zero
        end
    end
end)

-- Tàng hình
local function toggleInvisibility()
    invisible = not invisible
    local character = player.Character

    if invisible then
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                originalTransparency[part] = part.Transparency
                part.Transparency = 1
            elseif part:IsA("Decal") then
                originalTransparency[part] = part.Transparency
                part.Transparency = 1
            end
        end

        for _, child in ipairs(character.Head:GetChildren()) do
            if child:IsA("BillboardGui") or child:IsA("SurfaceGui") then
                originalNameDisplay[child] = child.Enabled
                child.Enabled = false
            end
        end

        sendNotification("Tàng hình", "Đã bật chế độ tàng hình.")
    else
        for part, transparency in pairs(originalTransparency) do
            if part and part:IsA("Instance") then
                part.Transparency = transparency
            end
        end

        for gui, enabled in pairs(originalNameDisplay) do
            if gui and gui:IsA("Instance") then
                gui.Enabled = enabled
            end
        end

        sendNotification("Tàng hình", "Đã tắt chế độ tàng hình.")
    end
end

-- Xuyên tường
local function toggleNoClip()
    noClip = not noClip
    sendNotification("Xuyên tường", noClip and "Đã bật xuyên tường." or "Đã tắt xuyên tường.")
end

RunService.Stepped:Connect(function()
    if noClip then
        local character = player.Character
        if character then
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end
    end
end)

-- Tìm người chơi gần nhất phía trước
local function findClosestPlayerInFront()
    local character = player.Character
    local hrp = character and character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end

    local closestPlayer = nil
    local closestDistance = math.huge
    local playerLookVector = hrp.CFrame.LookVector

    for _, otherPlayer in ipairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local otherHrp = otherPlayer.Character.HumanoidRootPart
            local distance = (otherHrp.Position - hrp.Position).Magnitude

            if distance >= minRange and distance <= searchRange then
                local directionToOther = (otherHrp.Position - hrp.Position).Unit
                local dotProduct = playerLookVector:Dot(directionToOther)

                if dotProduct > 0.5 and distance < closestDistance then
                    closestPlayer = otherPlayer
                    closestDistance = distance
                end
            end
        end
    end

    return closestPlayer
end

-- Dịch chuyển
local function toggleTeleport()
    teleporting = not teleporting
    if teleporting then
        targetPlayer = findClosestPlayerInFront()
        if targetPlayer then
            sendNotification("Bắt mục tiêu", "Đã cố định mục tiêu: " .. targetPlayer.Name)
        else
            sendNotification("Bắt mục tiêu", "Không tìm thấy mục tiêu trong phạm vi.")
            teleporting = false
        end
    else
        sendNotification("Bắt mục tiêu", "Đã dừng dịch chuyển.")
        targetPlayer = nil
    end
end

RunService.Heartbeat:Connect(function()
    if teleporting and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetHrp = targetPlayer.Character.HumanoidRootPart
        local humanoid = targetPlayer.Character:FindFirstChild("Humanoid")

        -- Kiểm tra máu của mục tiêu
        if humanoid and humanoid.Health <= 0 then
            sendNotification("Bắt mục tiêu", "Đã tắt dịch chuyển vì mục tiêu đã chết.")
            teleporting = false
            targetPlayer = nil
            return
        end

        local character = player.Character
        local hrp = character and character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local targetPosition = targetHrp.Position - targetHrp.CFrame.LookVector * teleportDistance
            local tween = TweenService:Create(hrp, TweenInfo.new(tweenTime), { CFrame = CFrame.new(targetPosition) })
            tween:Play()
        end
    end
end)

-- Phím tắt
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.G then
        toggleFly()
    elseif input.KeyCode == Enum.KeyCode.T then
        toggleInvisibility()
    elseif input.KeyCode == Enum.KeyCode.H then
        toggleNoClip()
    elseif input.KeyCode == Enum.KeyCode.E then
        toggleTeleport()
    end
end)

